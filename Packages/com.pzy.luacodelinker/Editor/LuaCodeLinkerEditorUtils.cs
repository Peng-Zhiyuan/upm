using UnityEngine;
using System.Collections;
using System.Text;
using System;
using System.Collections.Generic;
using System.IO;
using UnityEditor;

namespace ElementSystem
{

    public static class LuaCodeLinkerEditorUtils 
    {

        public static void GenerateCodeForTree(LuaCodeLinkerObject tree)
        {

  
            var sb = new StringBuilder();

            var nowDate = DateTime.Now;
            var timeString = nowDate.ToString("yyyy/MM/dd HH:mm:ss");

            string className = tree.GetClassName();

            //sb.AppendLine("using UnityEngine;");
            ////sb.AppendLine("using ElementSystem;");
            //sb.AppendLine("using UnityEngine.UI;");
            //sb.AppendLine("using System;");
            //sb.AppendLine("using DG.Tweening;");
            //sb.AppendLine("using Spine.Unity;");
            //sb.AppendLine("using Sirenix.OdinInspector;");
            //sb.AppendLine("using TMPro;");
            //sb.AppendLine();
            sb.AppendLine("-- This file was auto generated by LuaCodeLinker");
            sb.AppendLine($"-- update time : " + timeString);
            //sb.AppendLine("public partial class " + className + " : " + superClassName);
            //sb.AppendLine("{");
            sb.AppendLine($"function {className}:InitView()");

            // 寻找所有$变量transform
            var transformToTreePathDic = new Dictionary<Transform, string>();
            FindMark(true, tree.transform, transformToTreePathDic, "");

            // 生成搜索代码
            List<string> outVariableNameList = new List<string>();
            foreach (var kv in transformToTreePathDic)
            {
                var tranfrom = kv.Key;
                var path = kv.Value;
                var variableName = tranfrom.name;
                if (path == "")
                {
                    // 根结点不需要生成索引
                    continue;
                }
                variableName = variableName.Trim('$');
                variableName = variableName.Trim('@');
                variableName = variableName.Replace("$", "_");
                variableName = variableName.Replace("@", "_");
                variableName = variableName.Replace(" ", "_");
                variableName = variableName.Replace("+", "_");
                variableName = variableName.Replace("-", "_");
                variableName = variableName.Replace(".", "_");
                variableName = variableName.Replace("<", "_");
                variableName = variableName.Replace(">", "_");
                variableName = variableName.Replace("[", "_");
                variableName = variableName.Replace("]", "_");
                variableName = variableName.Trim('_');
                //var propertyName = ToProertyFormat(variableName);
                var backfeildName = ToBackfeildFormat(variableName);
                // 决定type
                var typeName = DecideTypeName(tranfrom);

                //sb.AppendLine("\tprivate " + typeName + " " + backfeildName + ";");
                //sb.AppendLine("\tprotected " + typeName + " " + propertyName);
                //sb.AppendLine("\t{");
                //sb.AppendLine("\t\tget");
                //sb.AppendLine("\t\t{");
                //sb.AppendLine("\t\t\tif(" + backfeildName + " == null)");
                //sb.AppendLine("\t\t\t{");
                //sb.AppendLine("\t\t\t\tvar t = CodeLinkerUtil.FindByPath(transform, \"" + path + "\");");
                //sb.AppendLine("\t\t\t\t" + backfeildName + " = t.gameObject.GetComponent<" + typeName + ">();");
                //sb.AppendLine("\t\t\t}");
                //sb.AppendLine("\t\t\treturn " + backfeildName + ";");
                //sb.AppendLine("\t\t}");
                //sb.AppendLine("\t}");
                //sb.AppendLine();

                sb.AppendLine($"\tself.{variableName} = self.transform:Find(\"{path}\"):GetComponent(\"{typeName}\")");

                outVariableNameList.Add(variableName);
            }

            // 类似变量名产生数组
            var arrayVariableToElementVariableList = GenerateSimmilerVariables(outVariableNameList);
            foreach(var kv in arrayVariableToElementVariableList)
            {
                var arrayName = kv.Key;
                var elementVariableList = kv.Value;

                sb.Append($"\tself.{arrayName} = {{");
                var isFirst = true;
                foreach(var one in elementVariableList)
                {
                    if(!isFirst)
                    {
                        sb.Append($", ");
                    }
                    if(isFirst)
                    {
                        isFirst = false;
                    }
                    sb.Append($"self.{one}");
                }
                sb.AppendLine("}");
            }
            

            // 结束部分类
            sb.AppendLine("end");
            // 代码
            var code = sb.ToString();
            // 写文件
            var filePath = ResolveCodeFilePath(className);
            File.WriteAllText(filePath, code);
            
            GenControllerPage(className);
            
            AssetDatabase.Refresh();
            Debug.Log("[LuaCodeLinker] code generated at: " + filePath);
        }

        static void GenControllerPage(string name)
        {
            var fileName = name;
            var filePath = FindCodeFilePath(fileName);
            if (!string.IsNullOrEmpty(filePath))
            {
                return;
            }
            else
            {
                var generateCodeDir = "Assets/AddressableRes/Lua/Controller";
                if (!Directory.Exists(generateCodeDir))
                {
                    Directory.CreateDirectory(generateCodeDir);
                }
                var newFilePath = generateCodeDir + "/" + fileName + ".lua";
                
                string path;
                string viewPathCode = "";
                string baseCls;
                name = name;
                baseCls = "BasePage";

                var template = @"{0} = class('{0}', {1})
require('{0}+')
{2}
function {0}:Awake()
    self:InitView()
end

function {0}:OnActive()
    self:AddListener()
    self:Init()
end

function {0}:OnDeactive()
    self:RemoveListener()
    self:Close()
end
--以上自动生成，以下是逻辑开发

--界面打开
function {0}:OnNavigatedTo(navigateInfo)

end

--界面初始化
function {0}:Init()

end

--界面关闭
function {0}:Close()

end
";
                var data = string.Format(template, name, baseCls, viewPathCode);
                File.WriteAllText(newFilePath, data, Encoding.UTF8);
                
            }
        }

        static Dictionary<string, List<string>> GenerateSimmilerVariables(List<string> variableList)
        {
            Dictionary<string, Dictionary<int, string>> dic = new Dictionary<string, Dictionary<int, string>>();
            foreach(var one in variableList)
            {
                var lastChar = one[one.Length - 1];
                int lastNumber;
                var isNumber = int.TryParse(lastChar + "", out lastNumber);
                if(isNumber)
                {
                    var arraryName = one.Substring(0, one.Length - 1) + "s";
                    var indexToDic = DictionaryUtil.GetOrCreateDic(dic, arraryName);
                    indexToDic[lastNumber] = one;
                }
            }

            Dictionary<string, List<string>> arrayNameToElementVariableDic = new Dictionary<string, List<string>>();
            foreach (var kv in dic)
            {
                var arrayName = kv.Key;
                var indexToVariableDic = kv.Value;
                var index = 1;
                while (true)
                {
                    var hasIndex = indexToVariableDic.ContainsKey(index);
                    if(hasIndex)
                    {
                        var elementVariabelName = indexToVariableDic[index];
                        var list = DictionaryUtil.GetOrCreateList(arrayNameToElementVariableDic, arrayName);
                        list.Add(elementVariabelName);
                        index++;
                    }
                    else
                    {
                        break;
                    }

                }
            }
            return arrayNameToElementVariableDic;
        }

        private static string DecideTypeName(Transform tranfrom)
        {
            //var hotCreator = tranfrom.GetComponent<HotBehaviorCreator>();
            //if(hotCreator != null)
            //{
            //    var type = hotCreator.ClassType;
            //    var name = type.Name;
            //    return name;
            //}

            var compponentSerachTypeList = new Type[]
            {
                    // typeof(Element),
                    // typeof(ElementScrollView),
                    // typeof(View),
                    // typeof(UIWidget),
                    // typeof(UIRect),
                    // typeof(UIWidgetContainer),
                    //typeof(ScrollViewHelper),
                    //typeof(UIPoolList),
                    typeof(ParticleSystem),
                    typeof(MonoBehaviour),
                    typeof(Component),
            };
            foreach (var type in compponentSerachTypeList)
            {
                var comList = tranfrom.GetComponents(type);
                if (comList.Length == 0)
                {
                    continue;
                }
                
                foreach (var com in comList)
                {
                    var thisTypeName = com.GetType().Name;
                    if (thisTypeName == "CodeLinkerObject")
                    {
                        continue;
                    }
                    if (thisTypeName == "Transform")
                    {
                        continue;
                    }
                    if(thisTypeName == "RectTransform")
                    {
                        continue;
                    }
                    return thisTypeName;
                }
            }

            if (tranfrom.GetComponent<RectTransform>() != null)
            {
                return "RectTransform";
            }
            else
            {
                return "Transform";
            }
        }

        private static void FindMark(bool isRoot, Transform t, Dictionary<Transform, string> dic, string parentPath)
        {
            if (t.name.Contains("/"))
            {
                throw new Exception("transform name can't contains '/'");
            }
            string path;
            if (isRoot)
            {
                path = "";
            }
            else
            {
                path = parentPath == "" ? t.name : parentPath + "/" + t.name;
            }
            bool rescure = true;
            if (t.name.StartsWith("$") || t.name.StartsWith("m_"))
            {
                dic[t] = path;
            }
            else if (t.name.StartsWith("@"))
            {
                dic[t] = path;
                rescure = false;
            }
            else if (t.name.StartsWith("."))
            {
                rescure = false;
            }

            if (!isRoot)
            {
                if (rescure)
                {
                    if (t.GetComponent<LuaCodeLinkerObject>() != null)
                    {
                        rescure = false;
                    }
                }
            }

            if (rescure)
            {
                for (int i = 0; i < t.childCount; i++)
                {
                    var child = t.GetChild(i);
                    FindMark(false, child, dic, path);
                }
            }

        }

        private static string ToProertyFormat(string name)
        {
            return name.Substring(0,1).ToUpper() + name.Substring(1);
        }

        private static string ToBackfeildFormat(string name)
        {
            return "_" + name.Substring(0,1).ToLower() + name.Substring(1);
        }

        public static String FindCodeFilePath(string codeFileName)
        {
            var searchStr = codeFileName + " t:LuaAsset";
            var idList = AssetDatabase.FindAssets(searchStr);
            //Debug.Log(searchStr);
            foreach (var id in idList)
            {
                var path = AssetDatabase.GUIDToAssetPath(id);
                //Debug.Log(path);
                var fileName = Path.GetFileName(path);
                if (fileName == codeFileName + ".lua")
                {
                    return path;
                }
            }
            return null;
        }

        public static string ResolveCodeFilePath(string className)
        {
            var fileName = className + "+";
            var filePath = FindCodeFilePath(fileName);
            if (!string.IsNullOrEmpty(filePath))
            {
                return filePath;
            }
            else
            {
                var generateCodeDir = "Assets/$res/LuaCodeLinkerGenerate";
                if (!Directory.Exists(generateCodeDir))
                {
                    Directory.CreateDirectory(generateCodeDir);
                }
                var newFilePath = generateCodeDir + "/" + fileName + ".lua";
                return newFilePath;
            }
        }

    }

}