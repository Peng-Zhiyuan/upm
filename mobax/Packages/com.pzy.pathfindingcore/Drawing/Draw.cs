// This file is automatically generated by a script based on the CommandBuilder API
using Unity.Burst;
using UnityEngine;
using System.Collections.Generic;
using Unity.Collections;
using Unity.Mathematics;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Jobs;

namespace PathfindingCore.Drawing {
	public static class Draw {
		internal static CommandBuilder builder;
		internal static CommandBuilder ingame_builder;


#if UNITY_EDITOR
		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WithMatrix(Matrix4x4)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static CommandBuilder.ScopeMatrix WithMatrix (Matrix4x4 matrix) {
			DrawingManager.Init();
			return builder.WithMatrix(matrix);
		}
#else
		[BurstDiscard]
		public static CommandBuilder.ScopeEmpty WithMatrix (Matrix4x4 matrix) {
			// Do nothing in standlone builds
			return new CommandBuilder.ScopeEmpty();
		}
#endif


#if UNITY_EDITOR
		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WithColor(Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static CommandBuilder.ScopeColor WithColor (Color color) {
			DrawingManager.Init();
			return builder.WithColor(color);
		}
#else
		[BurstDiscard]
		public static CommandBuilder.ScopeEmpty WithColor (Color color) {
			// Do nothing in standlone builds
			return new CommandBuilder.ScopeEmpty();
		}
#endif

















		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Line(float3,float3)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Line (float3 a, float3 b) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Line(a, b);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Line(Vector3,Vector3)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Line (Vector3 a, Vector3 b) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Line(a, b);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Line(Vector3,Vector3,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Line (Vector3 a, Vector3 b, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Line(a, b, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Ray(float3,float3)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Ray (float3 origin, float3 direction) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Ray(origin, direction);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Ray(Ray,float)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Ray (Ray ray, float length) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Ray(ray, length);
#endif
		}


		/// <summary>
		/// \copydoc Drawing::CommandBuilder::CircleXZ(float3,float,float,float)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void CircleXZ (float3 center, float radius, float startAngle = 0f, float endAngle = 2 * Mathf.PI) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.CircleXZ(center, radius, startAngle, endAngle);
#endif
		}



		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireCylinder(float3,float3,float)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireCylinder (float3 bottom, float3 top, float radius) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireCylinder(bottom, top, radius);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireCylinder(float3,float3,float,float)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireCylinder (float3 position, float3 up, float height, float radius) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireCylinder(position, up, height, radius);
#endif
		}




		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(List<Vector3>,bool)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (List<Vector3> points, bool cycle = false) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, cycle);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(Vector3[],bool)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (Vector3[] points, bool cycle = false) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, cycle);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(float3[],bool)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (float3[] points, bool cycle = false) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, cycle);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(NativeArray<float3>,bool)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (NativeArray<float3> points, bool cycle = false) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, cycle);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireBox(float3,float3)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireBox (float3 center, float3 size) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireBox(center, size);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireBox(float3,Quaternion,float3)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireBox (float3 center, Quaternion rotation, float3 size) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireBox(center, rotation, size);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireBox(Bounds)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireBox (Bounds bounds) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireBox(bounds);
#endif
		}






		/// <summary>
		/// \copydoc Drawing::CommandBuilder::CrossXZ(float3,float)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void CrossXZ (float3 position, float size = 1) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.CrossXZ(position, size);
#endif
		}











		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireGrid(float3,Quaternion,int2,float2)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireGrid (float3 center, Quaternion rotation, int2 cells, float2 totalSize) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireGrid(center, rotation, cells, totalSize);
#endif
		}
















		/// <summary>
		/// \copydoc Drawing::CommandBuilder::SolidBox(float3,float3)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void SolidBox (float3 center, float3 size) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.SolidBox(center, size);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::SolidBox(Bounds)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void SolidBox (Bounds bounds) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.SolidBox(bounds);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::SolidBox(float3,Quaternion,float3)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void SolidBox (float3 center, Quaternion rotation, float3 size) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.SolidBox(center, rotation, size);
#endif
		}



		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Line(float3,float3,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Line (float3 a, float3 b, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Line(a, b, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Ray(float3,float3,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Ray (float3 origin, float3 direction, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Ray(origin, direction, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Ray(Ray,float,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Ray (Ray ray, float length, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Ray(ray, length, color);
#endif
		}


		/// <summary>
		/// \copydoc Drawing::CommandBuilder::CircleXZ(float3,float,float,float,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void CircleXZ (float3 center, float radius, float startAngle, float endAngle, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.CircleXZ(center, radius, startAngle, endAngle, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::CircleXZ(float3,float,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void CircleXZ (float3 center, float radius, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.CircleXZ(center, radius, color);
#endif
		}




		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireCylinder(float3,float3,float,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireCylinder (float3 bottom, float3 top, float radius, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireCylinder(bottom, top, radius, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireCylinder(float3,float3,float,float,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireCylinder (float3 position, float3 up, float height, float radius, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireCylinder(position, up, height, radius, color);
#endif
		}




		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(List<Vector3>,bool,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (List<Vector3> points, bool cycle, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, cycle, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(List<Vector3>,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (List<Vector3> points, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(Vector3[],bool,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (Vector3[] points, bool cycle, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, cycle, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(Vector3[],Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (Vector3[] points, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(float3[],bool,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (float3[] points, bool cycle, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, cycle, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(float3[],Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (float3[] points, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(NativeArray<float3>,bool,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (NativeArray<float3> points, bool cycle, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, cycle, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::Polyline(NativeArray<float3>,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void Polyline (NativeArray<float3> points, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.Polyline(points, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireBox(float3,float3,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireBox (float3 center, float3 size, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireBox(center, size, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireBox(float3,Quaternion,float3,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireBox (float3 center, Quaternion rotation, float3 size, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireBox(center, rotation, size, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireBox(Bounds,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireBox (Bounds bounds, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireBox(bounds, color);
#endif
		}





		/// <summary>
		/// \copydoc Drawing::CommandBuilder::CrossXZ(float3,float,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void CrossXZ (float3 position, float size, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.CrossXZ(position, size, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::CrossXZ(float3,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void CrossXZ (float3 position, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.CrossXZ(position, color);
#endif
		}













		/// <summary>
		/// \copydoc Drawing::CommandBuilder::WireGrid(float3,Quaternion,int2,float2,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void WireGrid (float3 center, Quaternion rotation, int2 cells, float2 totalSize, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.WireGrid(center, rotation, cells, totalSize, color);
#endif
		}
















		/// <summary>
		/// \copydoc Drawing::CommandBuilder::SolidBox(float3,float3,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void SolidBox (float3 center, float3 size, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.SolidBox(center, size, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::SolidBox(Bounds,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void SolidBox (Bounds bounds, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.SolidBox(bounds, color);
#endif
		}

		/// <summary>
		/// \copydoc Drawing::CommandBuilder::SolidBox(float3,Quaternion,float3,Color)
		/// Warning: This method cannot be used inside of Burst jobs. See job-system (view in online documentation for working links) instead.
		/// </summary>
		[BurstDiscard]
		public static void SolidBox (float3 center, Quaternion rotation, float3 size, Color color) {
#if UNITY_EDITOR
			DrawingManager.Init();
			builder.SolidBox(center, rotation, size, color);
#endif
		}
	}
}
