using UnityEngine;
using UnityEngine.UI;

// This file was auto generated by CodeLinker
// update time : 2023/03/29 20:30:15
public partial class LauncherLoadingPage : MonoBehaviour
{
	private LauncherMutexComponent _switcher_logo;
	protected LauncherMutexComponent Switcher_logo
	{
		get
		{
			if(_switcher_logo == null)
			{
				var t = CodeLinkerUtil.FindByPath(transform, "offset2/$Switcher_logo");
				_switcher_logo = t.gameObject.GetComponent<LauncherMutexComponent>();
			}
			return _switcher_logo;
		}
	}

	private Text _text_version;
	protected Text Text_version
	{
		get
		{
			if(_text_version == null)
			{
				var t = CodeLinkerUtil.FindByPath(transform, "$text_version");
				_text_version = t.gameObject.GetComponent<Text>();
			}
			return _text_version;
		}
	}

	private Image _button_dev;
	protected Image Button_dev
	{
		get
		{
			if(_button_dev == null)
			{
				var t = CodeLinkerUtil.FindByPath(transform, "$button_dev");
				_button_dev = t.gameObject.GetComponent<Image>();
			}
			return _button_dev;
		}
	}

	private RectTransform _node_rewards;
	protected RectTransform Node_rewards
	{
		get
		{
			if(_node_rewards == null)
			{
				var t = CodeLinkerUtil.FindByPath(transform, "$Node_rewards");
				_node_rewards = t.gameObject.GetComponent<RectTransform>();
			}
			return _node_rewards;
		}
	}

	private HorizontalLayoutGroup _list_rewards;
	protected HorizontalLayoutGroup List_rewards
	{
		get
		{
			if(_list_rewards == null)
			{
				var t = CodeLinkerUtil.FindByPath(transform, "$Node_rewards/$List_rewards");
				_list_rewards = t.gameObject.GetComponent<HorizontalLayoutGroup>();
			}
			return _list_rewards;
		}
	}

	private Text _progress_text;
	protected Text Progress_text
	{
		get
		{
			if(_progress_text == null)
			{
				var t = CodeLinkerUtil.FindByPath(transform, "offset/Layout/$progress_text");
				_progress_text = t.gameObject.GetComponent<Text>();
			}
			return _progress_text;
		}
	}

	private Text _tip_loading;
	protected Text Tip_loading
	{
		get
		{
			if(_tip_loading == null)
			{
				var t = CodeLinkerUtil.FindByPath(transform, "offset/$tip_loading");
				_tip_loading = t.gameObject.GetComponent<Text>();
			}
			return _tip_loading;
		}
	}

	private SmoothProgressBar _progress;
	protected SmoothProgressBar Progress
	{
		get
		{
			if(_progress == null)
			{
				var t = CodeLinkerUtil.FindByPath(transform, "offset/$Progress");
				_progress = t.gameObject.GetComponent<SmoothProgressBar>();
			}
			return _progress;
		}
	}

	private Button _button_cs;
	protected Button Button_cs
	{
		get
		{
			if(_button_cs == null)
			{
				var t = CodeLinkerUtil.FindByPath(transform, "$button_cs");
				_button_cs = t.gameObject.GetComponent<Button>();
			}
			return _button_cs;
		}
	}

}
